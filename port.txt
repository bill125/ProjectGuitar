entity ImpulseGen is
	 generic 
	 ( 
	 pausePeriod: integer range 0 to 63 := 10
	 );
	port (
		start : in std_logic;
		hclk : in std_logic;
		clk_out : out std_logic := '0'
	);
end entity ImpulseGen;
	
entity NoteGen is
	port (
	triggeredString : in integer range 0 to 5;
	strings : in GuitarStatus;
	impulse_in, hclk : in std_logic;
	noteLevel : out integer range 0 to 88;
	impulse_out : out std_logic
	);
End entity NoteGen;

entity Programme is
  port (
	impulse_in : in std_logic;
	key_in : in std_logic_vector(7 downto 0);
   prog : out integer range 0 to 127
   );
end entity Programme;

entity Velocity is
	port (
	impulse_in : std_logic;
	key_in : in std_logic_vector(7 downto 0);
	vel : array (0 to 5) of integer
	);
End entity Velocity;

KeyboardInput:
	in:  
		clk, fclk, ...
	out: 
		seg0, seg1 : std_logic_vector(6 downto 0),
		
KeyboardAdapter:
	in:
		seg0, seg1 : std_logic_vector(6 downto 0),
		clk_in : std_logic;
	out:
		seg0, seg1 : std_logic_vector(6 downto 0),
		triggeredString : integer range from 0 to 5,
		clk_out : std_logic;
	
	
  entity UARTIn is
    generic (
      g_CLKS_PER_BIT : integer := 868     -- Needs to be set correctly
      );
    port (
      i_Clk       : in  std_logic;
      i_RX_Serial : in  std_logic;
      o_RX_DV     : out std_logic;
      o_RX_Byte   : out std_logic_vector(7 downto 0)
      );
  end entity UARTIn;

  entity UARTInAdapter is
    port (
		Byte : in std_logic_vector(7 downto 0);
		strings : out GuitarStatus
        );
  end entity UARTInAdapter;
  
  entity UARTOutAdapter is
    port (
		isOn : in std_logic;
		noteLevel : in integer range 0 to 5;
		vel  : in integer range 0 to 127;
		prog : in integer range 0 to 127;
		clk  : in std_logic;
		o_TX_SERIAL : out std_logic
        );
  end entity UARTOutAdapter;

  entity UARTOut is
    generic (
      g_CLKS_PER_BIT : integer := 868     -- Needs to be set correctly
      );
    port (
      i_Clk       : in  std_logic;
      i_TX_DV     : in  std_logic;
      i_TX_Byte   : in  std_logic_vector(7 downto 0);
      o_TX_Active : out std_logic;
      o_TX_Serial : out std_logic;
      o_TX_Done   : out std_logic
      );
  end entity UARTOut;
