entity ImpulseGen is
	 generic 
	 ( 
	 pausePeriod: integer := 10
	 );
	port (
		hclk : in std_logic;
		clk : out std_logic
	);
end entity ImpulseGen;
	
entity NoteGen is
	port (
	triggeredString : in integer range from 0 to 5;
	strings : in GuitarStatus;
	impulse, hclk : in std_logic;
	note : out integer range from 0 to 88;
	clk_out : out std_logic
	);
End entity NoteGen;

音源(Programme):
	in: 
		seg0, seg1 : in std_logic_vector(6 downto 0);
	out: 
		prog : integer range from 0 to 88;

entity Velocity is
	port (
	seg0, seg1 : in std_logic_vector(6 downto 0);
	vel : array (0 to 5) of integer
	);
End entity Velocity;

KeyboardInput:
	in:  
		clk, fclk, ...
	out: 
		seg0, seg1 : std_logic_vector(6 downto 0),
		triggeredString : integer range from 0 to 5
		
KeyboardAdapter:
	in:
		seg0, seg1 : std_logic_vector(6 downto 0),
		clk_in : std_logic;
	out:
		seg0, seg1 : std_logic_vector(6 downto 0),
		clk_out : std_logic;
	
	
UARTIn:
	in: 
		i_RX_SERIAL : std_logic
	out: 
		strings : GuitarStatus
	

UARTOut:
	in: 
		isOn : std_logic, 
		note : integer range from 0 to 5, 
		vel  : integer range from 0 to 127, 
		prog : integer range from 0 to 127, 
		clk  : std_logic
	out: 
		o_TX_SERIAL : std_logic
